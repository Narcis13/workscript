#!/usr/bin/env bun

import { mkdir, readFile, writeFile, exists } from 'node:fs/promises';
import { join, dirname, basename } from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = dirname(fileURLToPath(import.meta.url));

interface GenerationStep {
  name: string;
  promptFile: string;
  outputFile: string;
  previousArtifacts: string[];
}

const GENERATION_STEPS: GenerationStep[] = [
  {
    name: 'Specification Enhancement',
    promptFile: 'spec-enhancement-prompt.md',
    outputFile: 'spec-enhanced.md',
    previousArtifacts: []
  },
  {
    name: 'Requirements',
    promptFile: 'requirements-prompt.md',
    outputFile: 'requirements.md',
    previousArtifacts: ['spec-enhanced.md']
  },
  {
    name: 'Design',
    promptFile: 'design-prompt.md',
    outputFile: 'design.md',
    previousArtifacts: ['spec-enhanced.md', 'requirements.md']
  },
  {
    name: 'Tasks',
    promptFile: 'tasks-prompt.md',
    outputFile: 'tasks.md',
    previousArtifacts: ['spec-enhanced.md', 'requirements.md', 'design.md']
  }
];

async function ensureDirectoryExists(dirPath: string) {
  try {
    await mkdir(dirPath, { recursive: true });
  } catch (error) {
    console.error(`Error creating directory ${dirPath}:`, error);
    throw error;
  }
}

async function readPromptTemplate(promptName: string): Promise<string> {
  const promptPath = join(__dirname, 'templates', promptName);
  try {
    return await readFile(promptPath, 'utf-8');
  } catch (error) {
    console.error(`Error reading prompt template ${promptName}:`, error);
    throw error;
  }
}

async function generateArtifact(
  spec: string,
  step: GenerationStep,
  outputDir: string,
  previousArtifacts: Map<string, string>
): Promise<string> {
  console.log(`\nüìù Generating ${step.name}...`);
  
  const prompt = await readPromptTemplate(step.promptFile);
  
  // Build the context with spec and previous artifacts
  let context = `## Specification\n\n${spec}\n\n`;
  
  for (const artifactName of step.previousArtifacts) {
    const content = previousArtifacts.get(artifactName);
    if (content) {
      context += `## ${artifactName}\n\n${content}\n\n`;
    }
  }
  
  // In a real implementation, this would call an AI API
  // For now, we'll create a placeholder that explains what should happen
  const placeholderContent = `# ${step.name} Document

## Generated from Specification

This is a placeholder for the ${step.name.toLowerCase()} document that would be generated by an AI agent.

### How to use this:

1. Copy the prompt from: ${step.promptFile}
2. Provide the following context to your AI agent:

---
${prompt}

---

### Input Context:

${context}

### Instructions:
Ask your AI agent to generate the ${step.name.toLowerCase()} document based on the prompt and context above.

---

Note: In a production environment, this script would integrate with an AI API (like Claude, OpenAI, etc.) to automatically generate this content.`;

  const outputPath = join(outputDir, step.outputFile);
  await writeFile(outputPath, placeholderContent);
  
  console.log(`‚úÖ Generated ${step.outputFile}`);
  return placeholderContent;
}

async function validateSpecFile(specPath: string): Promise<string> {
  try {
    const specContent = await readFile(specPath, 'utf-8');
    if (!specContent.trim()) {
      throw new Error('Specification file is empty');
    }
    return specContent;
  } catch (error) {
    console.error(`Error reading specification file:`, error);
    throw error;
  }
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log(`
üöÄ AI-Assisted Software Development Framework Generator

Usage: bun run generate-artifacts.ts <spec-file> <project-name>

Arguments:
  spec-file     Path to your specification markdown file
  project-name  Name for the project (used for output directory)

Example:
  bun run generate-artifacts.ts ./specs/my-app.md my-app

This will generate:
  - .kiro/specs/my-app/spec-enhanced.md
  - .kiro/specs/my-app/requirements.md
  - .kiro/specs/my-app/design.md
  - .kiro/specs/my-app/tasks.md
`);
    process.exit(1);
  }

  const [specFile, projectName] = args;
  
  // Validate inputs
  if (!await exists(specFile)) {
    console.error(`‚ùå Specification file not found: ${specFile}`);
    process.exit(1);
  }
  
  if (!/^[a-zA-Z0-9-_]+$/.test(projectName)) {
    console.error('‚ùå Project name must contain only letters, numbers, hyphens, and underscores');
    process.exit(1);
  }
  
  console.log('üèóÔ∏è  AI-Assisted Software Development Framework Generator');
  console.log('=' .repeat(50));
  console.log(`üìÑ Specification: ${specFile}`);
  console.log(`üìÅ Project: ${projectName}`);
  
  try {
    // Read and validate specification
    const specContent = await validateSpecFile(specFile);
    
    // Prepare output directory
    const outputDir = join(process.cwd(), '.kiro', 'specs', projectName);
    await ensureDirectoryExists(outputDir);
    
    // Copy the original spec to the output directory
    const specOutputPath = join(outputDir, 'spec.md');
    await writeFile(specOutputPath, specContent);
    console.log(`\n‚úÖ Copied specification to ${specOutputPath}`);
    
    // Generate artifacts in sequence
    const generatedArtifacts = new Map<string, string>();
    
    for (const step of GENERATION_STEPS) {
      const artifactContent = await generateArtifact(
        specContent,
        step,
        outputDir,
        generatedArtifacts
      );
      generatedArtifacts.set(step.outputFile, artifactContent);
    }
    
    // Create a summary file
    const summaryContent = `# ${projectName} - Generated Artifacts

Generated on: ${new Date().toISOString()}

## Artifacts Generated:

1. **Original Specification**: spec.md (original input)
2. **Enhanced Specification**: spec-enhanced.md (analyzed and improved)
3. **Requirements**: requirements.md
4. **Design**: design.md
5. **Tasks**: tasks.md

## Next Steps:

1. Review each generated artifact
2. If using placeholder content, provide the prompts to your AI agent
3. Update artifacts as needed
4. Begin implementation following the tasks.md checklist

## Integration with AI Agents:

Add to your CLAUDE.md or similar AI agent configuration:

\`\`\`markdown
## Development Artifacts
- Original Specification: .kiro/specs/${projectName}/spec.md
- Enhanced Specification: .kiro/specs/${projectName}/spec-enhanced.md
- Requirements: .kiro/specs/${projectName}/requirements.md
- Design: .kiro/specs/${projectName}/design.md
- Tasks: .kiro/specs/${projectName}/tasks.md

Always reference these documents when implementing features.
\`\`\`
`;
    
    await writeFile(join(outputDir, 'README.md'), summaryContent);
    
    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ Generation complete!');
    console.log(`\nüìÅ Artifacts saved to: ${outputDir}`);
    console.log('\nGenerated files:');
    console.log('  - spec.md (original specification)');
    console.log('  - spec-enhanced.md (analyzed and improved specification)');
    console.log('  - requirements.md');
    console.log('  - design.md');
    console.log('  - tasks.md');
    console.log('  - README.md (summary and next steps)');
    
  } catch (error) {
    console.error('\n‚ùå Generation failed:', error);
    process.exit(1);
  }
}

// Run the script
main().catch(console.error);